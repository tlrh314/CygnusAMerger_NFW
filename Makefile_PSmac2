SHELL = /bin/bash    # This should always be present in a Makefile

## Target Computer ##
ifndef SYSTYPE
	SYSTYPE := $(shell hostname)
endif

#Std systype
#--------------------------------------- Select some defaults
# CC           = mpicc
# OPTIMIZE     = -Wall -g -O3
# MPI_INCL     =
# MPI_LIBS     = -lmpi
# GSL_INCL     =
# GSL_LIBS     =
# CFITSIO_INCL =
# CFITSIO_LIBS =
# HDF5_INCL    =
# HDF5_LIBS    =

#--------------------------------------- Select target computer

# Have Makefile detect system. Works on Taurus/Lisa.
# On MBP set env variable SYSTYPE because hostname depends on wifi connection?
#SYSTYPE="API"
#SYSTYPE="MBP"
#SYSTYPE="Taurus"
#SYSTYPE="Lisa"

#--------------------------------------- Adjust settings for target computer

# Edit by TLRH, 2015/12/03
ifeq ($(SYSTYPE),API)
	CC           = mpicc
	OPTIMIZE     = -O2 -Wall
	MPI_INCL     = -I/net/glados2.science.uva.nl/api/thalbes1/prerequisites-10.0/incl
	MPI_LIBS     = -L/net/glados2.science.uva.nl/api/thalbes1/prerequisites-10.0/lib
	GSL_INCL     = -I/net/glados2.science.uva.nl/api/thalbes1/prerequisites-10.0/incl
	GSL_LIBS     = -L/net/glados2.science.uva.nl/api/thalbes1/prerequisites-10.0/lib
	CFITSIO_INCL = -I/net/glados2.science.uva.nl/api/thalbes1/prerequisites-10.0/incl
	CFITSIO_LIBS = -L/net/glados2.science.uva.nl/api/thalbes1/prerequisites-10.0/lib
	HDF5_INCL    = -I
	HDF5_LIBs    = -L
endif

# Edit by TLRH, 2016/04/19
ifeq ($(SYSTYPE),MBP)
	CC           = mpicc
	OPTIMIZE     = -O2 -Wall
	MPI_INCL     = -I/opt/intel/lib
	MPI_LIBS     = -L/opt/intel/include
	GSL_INCL     = -I/usr/local/Cellar/gsl/1.16/include
	GSL_LIBS     = -L/usr/local/Cellar/gsl/1.16/lib
	CFITSIO_INCL = -I/usr/local/Cellar/cfitsio/3.390/include
	CFITSIO_LIBS = -L/usr/local/Cellar/cfitsio/3.390/lib
	HDF5_INCL    = -I/usr/local/Cellar/hdf5/1.8.16_1/include
	HDF5_LIBS    = -L/usr/local/Cellar/hdf5/1.8.16_1/bin -lhdf5 -lz -lsz
endif

# Edit by TLRH, 2016/04/22
ifeq ($(SYSTYPE),taurus)
	CC           = mpicc
	OPTIMIZE     = -O2 -Wall
	MPI_INCL     = -I/scratch/timo/prerequisites-10.0/include
	MPI_LIBS     = -L/scratch/timo/prerequisites-10.0/lib
	GSL_INCL     = -I/scratch/timo/prerequisites-10.0/include
	GSL_LIBS     = -L/scratch/timo/prerequisites-10.0/lib
	CFITSIO_INCL = -I/scratch/timo/prerequisites-10.0/include
	CFITSIO_LIBS = -L/scratch/timo/prerequisites-10.0/lib
	HDF5INCL     = -I/scratch/timo/prerequisites-10.0/include
	HDF5LIB      = -L/scratch/timo/prerequisites-10.0/bin -lhdf5 -lz -lsz
endif


ifeq (lisa.surfsara.nl, $(findstring lisa.surfsara.nl, $(SYSTYPE)))
# Make sure env variables are set. They should contain the lib and include paths
ifndef SARA_INCLUDE_PATH
$(error SARA_INCLUDE_PATH not set.)
endif
ifndef SARA_LIBRARY_PATH
$(error SARA_LIBRARY_PATH not set.)
endif

CC           = mpicc
OPTIMIZE     = -O2 -Wall
MPI_INCL     = -I$(SARA_INCLUDE_PATH)
MPI_LIBS     = -L$(SARA_LIBRARY_PATH)
GSL_INCL     = -I$(SARA_INCLUDE_PATH)
GSL_LIBS     = -L$(SARA_LIBRARY_PATH)
CFITSIO_INCL = -I/home/timoh/MyCfitsIO/include
CFITSIO_LIBS = -L/home/timoh/MyCfitsIO/lib
HDF5INCL     = -I$(SARA_INCLUDE_PATH)
HDF5LIB      = -L$(SARA_LIBRARY_PATH) -lhdf5 -lz -lsz
endif


ifneq (HAVE_HDF5,$(findstring HAVE_HDF5,$(OPT)))
	HDF5INCL =
	HDF5LIB  =
endif


EXEC = P-Smac2

SRCDIR = src

SRCFILES := ${shell find $(SRCDIR) -name \*.c -print}

ifeq (,$(wildcard $(SRCDIR)/print_settings.c)) # add if missing
	SRCFILES += $(SRCDIR)/print_settings.c
endif

OBJFILES = $(SRCFILES:.c=.o)

OBJS = $(addprefix $(SRCDIR),$(OBJFILES))

INCLFILES := ${shell find src -name \*.h -print}
INCLFILES += Config Makefile $(SRCDIR)/config.h

CFLAGS = -fopenmp -std=c99 $(OPTIMIZE) $(CFITSIO_INCL) $(GSL_INCL) $(MPI_INCL)

LIBS = -lm -lgsl -lgslcblas -lcfitsio $(MPI_LIBS) $(GSL_LIBS) $(CFITSIO_LIBS) 

%.o : %.c
	@echo [CC] $@
	@$(CC) $(CFLAGS)  -o $@ -c $<


$(EXEC): settings $(OBJFILES)
	$(CC) $(CFLAGS)  $(OBJFILES)  $(LIBS) -o $(EXEC)
	@ctags $(SRCFILES) $(INCLUDEFILES)

$(OBJFILES): $(INCLFILES)

$(SRCDIR)/config.h : Config 
	@echo 'Config -> config.h'
	@sed '/^#/d; /^$$/d; s/^/#define /g' Config > $(SRCDIR)/config.h

$(SRCDIR)/print_settings.c : Config
	@echo '-> print_settings.c'
	@echo '#include "proto.h"' >  $(SRCDIR)/print_settings.c
	@echo '#include "globals.h"' >>  $(SRCDIR)/print_settings.c
	@echo 'void print_compile_time_settings(){' >> $(SRCDIR)/print_settings.c
	@echo 'rprintf("Compiled with : \n"' >> $(SRCDIR)/print_settings.c
	@sed '/^#/d; /^$$/d; s/^/"   /g; s/$$/ \\n"/g;' Config >> $(SRCDIR)/print_settings.c
	@echo ');}' >> $(SRCDIR)/print_settings.c

.PHONY : settings

settings : 
	@echo " "
	@echo 'CC      = ' $(CC)
	$(CC) --version
	@echo 'CFLAGS  = ' $(CFLAGS)
	@echo 'LDFLAGS = ' $(LIBS)
	@echo 'EXEC    = ' $(EXEC)
	@echo " "

clean : 
	rm -f  $(OBJFILES) $(EXEC) src/config.h src/print_settings.c

help :
	@echo 'SYSTYPE   = '${SYSTYPE}
	@echo 'CC        = '${CC}
	@echo 'MPI_LIBS  = '${MPI_LIBS}
	@echo 'MPI_INCL  = '${MPI_INCL}
